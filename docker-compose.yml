services:
  springboot:
    image: openjdk:21-jdk-slim
    container_name: springboot_app
    build:
      context: ./backend
      dockerfile: Dockerfile
    working_dir: /backend
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_URL: ${POSTGRES_URL}
    ports:
      - "8080:8080"

  postgres:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -w ${POSTGRES_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql # Mount the schema file
  postgrest:
    image: postgrest/postgrest
    container_name: database_api
    environment:
      PGRST_DB_URI: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      PGRST_DB_ANON_ROLE: ${POSTGRES_USER}
      # PGRST_JWT_SECRET: todo: add this when we implement authentication
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3000:3000"
    depends_on:
      - postgres

volumes:
  postgres_data:
